datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryName  String        @default("Other")
  imageUrl      String?
  imagePublicId String?
  slug          String        @unique
  jobs          Job[]
  subCategories Subcategory[]
  profiles      Profile[]
}

model Job {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  companyName  String?
  title        String
  slug         String        @unique
  type         String
  location     String
  country      String
  state        String
  city         String
  phoneNumber  String?
  email        String
  experience   String?
  description  String
  skills       String[]
  recruiterId  String
  isFeatured   Boolean       @default(false)
  isPublished  Boolean       @default(false)
  applications Application[]
  ratings      Float?

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  Category      Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?      @db.ObjectId
  subcategoryId String?      @db.ObjectId
  Profile       Profile?     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String?      @db.ObjectId
}

model Application {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  recruiterUserID    String
  fullName           String
  email              String
  candidateUserID    String
  status             String
  jobID              String   @db.ObjectId
  jobApplicationDate DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  job Job @relation(fields: [jobID], references: [id], onDelete: Cascade)
}

model Profile {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId              String
  fullName            String
  address             String
  phoneNumber         String?
  dateOfBirth         DateTime?
  gender              String?
  role                Role
  email               String
  isPremiumUser       Boolean   @default(false)
  memberShipType      String?
  isApproved          Boolean   @default(false)
  isAdmin             Boolean   @default(false)
  memberShipStartDate DateTime?
  memberShipEndDate   DateTime?

  stripeCustomerId     String? // Add this field
  stripeSubscriptionId String? // Add this field

  // Recruiter specific fields
  // Candidate specific fields
  avatarUrl            String?
  idUrl                String?
  country              String?
  state                String?
  city                 String?
  companyName          String?
  preferredJobLocation String?
  linkedinProfile      String?
  isCandidatePremium   Boolean?
  ratings              Float?
  skills               String[]
  candidateJobs        candidateJobs[]
  jobs                 Job[]
  Feeds                Feed[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now())

  Subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  Category      Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?      @db.ObjectId
  subcategoryId String?      @db.ObjectId
}

model Subcategory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  subcategoryName String
  desc            String?
  slug            String    @unique
  onMegaMenu      Boolean   @default(false)
  jobs            Job[]
  profiles        Profile[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  Category        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId      String?   @db.ObjectId
  subcategoryId   String?   @db.ObjectId
}

model candidateJobs {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  isStarted      Boolean @default(false)
  isFinished     Boolean @default(false)
  fullName       String
  email          String
  phoneNumber    String
  jobDescription String

  Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Feed {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  fullName String
  slug     String
  message  String
  imageUrl String?
  likes    Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?  @db.ObjectId
}

model Like {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  reactorUserId   String
  reactorUserName String
  Feed            Feed?   @relation(fields: [feedId], references: [id], onDelete: Cascade)
  feedId          String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Role {
  RECRUITER
  CANDIDATE
}
